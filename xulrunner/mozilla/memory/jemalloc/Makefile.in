#
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is mozilla.org code.
#
# The Initial Developer of the Original Code is
# Mozilla Foundation
# Portions created by the Initial Developer are Copyright (C) 2008
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#  Ted Mielczarek <ted.mielczarek@gmail.com>
#  J. Paul Reed <mozpreed@sigkill.com>
#
# Alternatively, the contents of this file may be used under the terms of
# either of the GNU General Public License Version 2 or later (the "GPL"),
# or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

DEPTH		= ../..
topsrcdir	= @top_srcdir@
srcdir		= @srcdir@
VPATH		= @srcdir@

include $(DEPTH)/config/autoconf.mk

MODULE		= jemalloc

ifeq (WINNT,$(OS_TARGET))
# Two options for Windows, either you build the CRT from source,
# or you use a pre-built DLL.
ifneq (,$(WIN32_CRT_SRC_DIR))
# Building the CRT from source
CRT_OBJ_DIR=$(shell pwd)/$(shell basename "$(WIN32_CRT_SRC_DIR)")


ifeq ($(MOZ_DEBUG),1)
MOZ_CRT_DLL_NAME = mozcrt19d
MOZ_MEMORY_WIN32_CRTLIBS = libcmtd libcmptd
else
MOZ_CRT_DLL_NAME = mozcrt19
MOZ_MEMORY_WIN32_CRTLIBS = libcmt libcmpt
endif # MOZ_DEBUG

MOZ_CRT_DLL = $(CRT_OBJ_DIR)/build/intel/$(MOZ_CRT_DLL_NAME).dll
MOZ_CRT_LIB = $(CRT_OBJ_DIR)/build/intel/$(MOZ_CRT_DLL_NAME).lib
MOZ_CRT_PDB = $(CRT_OBJ_DIR)/build/intel/$(MOZ_CRT_DLL_NAME).pdb

WIN32_CRT_SRC_MEM_HEADERS=crtdbg.h malloc.h xdebug xlocale

.PHONY: mozcrtlibs mozcrtruntimedll

libs:: mozcrtlibs mozcrtruntimedll

mozcrtlibs: $(MOZ_CRT_DLL) $(MOZ_CRT_LIB) $(MOZ_CRT_PDB)
	$(INSTALL) $^ $(DIST)/lib

mozcrtruntimedll: $(MOZ_CRT_DLL)
	$(INSTALL) $^ $(FINAL_TARGET)

# patch if necessary
$(CRT_OBJ_DIR)/jemalloc.c: $(srcdir)/crtsp1.diff
	rm -rf $(CRT_OBJ_DIR)
	cp -R "$(WIN32_CRT_SRC_DIR)" .

	# Ooh, let's be clever...
	cp $(addprefix $(CRT_OBJ_DIR)/, _sample_.rc mozcrt19.rc)
	cp $(addprefix $(CRT_OBJ_DIR)/intel/, _sample_.def mozcrt19.def)
	cp $(addprefix $(CRT_OBJ_DIR)/intel/, _sampld_.def mozcrt19d.def)

	# release rc files
	for f in $(addprefix $(CRT_OBJ_DIR)/, sample_p.rc sample_m.rc); do \
	  a=`echo $$f | sed -e 's/sample/mozcrt19/'`; \
	  cp -v $$f $$a; \
	done

	# Release dll def files; still need them for the patch, though...
	for f in $(addprefix $(CRT_OBJ_DIR)/, sample_m.def sample_p.def sample_u.def); do \
	  a=`echo $$f | sed -e 's/sample/mozcrt19/'`; \
	  cp -v $$f $$a; \
	done

	# Debug dll def files; still need them for the patch, though...
	for f in $(addprefix $(CRT_OBJ_DIR)/, sampld_m.def sampld_p.def sampld_u.def); do \
	  a=`echo $$f | sed -e 's/sampld/mozcrt19d/'`; \
	  cp -v $$f $$a; \
	done

	# per http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=1189363&SiteID=1
	for i in dll mt xdll xmt; do \
	  pushd $(CRT_OBJ_DIR)/intel/$${i}_lib && lib -extract:..\\build\\intel\\$${i}_obj\\unhandld.obj eh.lib && popd; \
	done
	# truly awful
	#XXX: get ed into mozillabuild, bug 415123
	$(PERL) $(srcdir)/apply-ed-patches.pl $(srcdir)/crtsp1.diff \
	$(CRT_OBJ_DIR) $(srcdir)/ed.exe

$(MOZ_CRT_DLL): \
  $(CRT_OBJ_DIR)/jemalloc.c $(srcdir)/jemalloc.c $(srcdir)/tree.h
	cp $(srcdir)/jemalloc.c $(srcdir)/tree.h $(CRT_OBJ_DIR)
	# this pretty much sucks, but nmake and make don't play well together
	MOZ_DEBUG=$(MOZ_DEBUG) $(PYTHON) $(srcdir)/build-crt.py $(CRT_OBJ_DIR)
ifeq ($(MOZ_DEBUG),1)
	# debug mode
	# In debug mode, we need to copy the debug headers we've patched, so
	# the mozilla build uses the same headers that we used for the CRT
	# build; incidentally, this is why INCLUDE now gets munged
	cp -v $(addprefix $(CRT_OBJ_DIR)/, $(WIN32_CRT_SRC_MEM_HEADERS)) $(CRT_OBJ_DIR)/build/intel
	#XXX: these don't link right for some reason
	# cp -v $(CRT_OBJ_DIR)/build/intel/{libcmtd,libcpmtd}.{lib,pdb} .
	rm $(CRT_OBJ_DIR)/build/intel/{libcmtd,libcpmtd}.lib
else
	# release mode
	#XXX: these don't link right for some reason
	rm $(CRT_OBJ_DIR)/build/intel/{libcmt,libcpmt}.lib
	# Enable if we ever remove the above 
	# cp -v $(CRT_OBJ_DIR)/build/intel/{libcmt,libcpmt}.{lib,pdb} . 
endif # MOZ_DEBUG

else # $(WIN32_CRT_SRC_DIR) != ""
# Using a pre-built DLL, so just install it; can't redistrib the debug CRT, so
# no target for it.
ifdef ($(MOZ_DEBUG),1)
$(error Cannot build debug mode with pre-built jemalloc Win32 CRT.)
endif

libs:: $(WIN32_CUSTOM_CRT_DIR)/mozcrt19.dll
	$(INSTALL) $< $(FINAL_TARGET)
endif # neq(,$(WIN32_CRT_SRC_DIR)), i.e. pre-built mozcrt available

else # WINNT != $(OS_TARGET)

MODULE_OPTIMIZE_FLAGS = -O2
ifeq ($(OS_ARCH),SunOS)
ifndef GNU_CC
MODULE_OPTIMIZE_FLAGS = -xO5
endif
endif

LIBRARY_NAME	= jemalloc

# Build jemalloc as a shared lib.  This is mandatory for Darwin, since a library
# init function is used on that platform.
FORCE_SHARED_LIB= 1

CSRCS		= \
		jemalloc.c \
		$(NULL)

#XXX: PGO on Linux causes problems here
# See bug 419470
NO_PROFILE_GUIDED_OPTIMIZE = 1
endif # (WINNT,$(OS_TARGET))

include $(topsrcdir)/config/rules.mk

ifeq (Darwin,$(OS_TARGET))
LDFLAGS += -init _jemalloc_darwin_init
endif
