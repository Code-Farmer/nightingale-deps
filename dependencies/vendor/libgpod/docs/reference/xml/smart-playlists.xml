<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libgpod-Smart-Playlists">
<refmeta>
<refentrytitle role="top_of_page">Smart Playlists</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGPOD Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Smart Playlists</refname>
<refpurpose>Data structures used to manipulate iPod smart playlists</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



            <link linkend="SPLPref">SPLPref</link>;
            <link linkend="SPLRule">SPLRule</link>;
            <link linkend="SPLRules">SPLRules</link>;
enum        <link linkend="SPLAction">SPLAction</link>;
enum        <link linkend="SPLFieldType">SPLFieldType</link>;
enum        <link linkend="SPLActionType">SPLActionType</link>;
enum        <link linkend="SPLField">SPLField</link>;
#define     <link linkend="SPLDATE-IDENTIFIER:CAPS">SPLDATE_IDENTIFIER</link>
#define     <link linkend="SPL-MAXSTRINGLENGTH:CAPS">SPL_MAXSTRINGLENGTH</link>
#define     <link linkend="SPL-STRING-MAXLEN:CAPS">SPL_STRING_MAXLEN</link>
<link linkend="SPLFieldType">SPLFieldType</link> <link linkend="itdb-splr-get-field-type">itdb_splr_get_field_type</link>       (const <link linkend="SPLRule">SPLRule</link> *splr);
<link linkend="SPLActionType">SPLActionType</link> <link linkend="itdb-splr-get-action-type">itdb_splr_get_action_type</link>     (const <link linkend="SPLRule">SPLRule</link> *splr);
<link linkend="void">void</link>        <link linkend="itdb-splr-validate">itdb_splr_validate</link>              (<link linkend="SPLRule">SPLRule</link> *splr);
<link linkend="void">void</link>        <link linkend="itdb-splr-remove">itdb_splr_remove</link>                (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                             <link linkend="SPLRule">SPLRule</link> *splr);
<link linkend="SPLRule">SPLRule</link>*    <link linkend="itdb-splr-new">itdb_splr_new</link>                   (void);
<link linkend="void">void</link>        <link linkend="itdb-splr-add">itdb_splr_add</link>                   (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                             <link linkend="SPLRule">SPLRule</link> *splr,
                                             <link linkend="gint">gint</link> pos);
<link linkend="SPLRule">SPLRule</link>*    <link linkend="itdb-splr-add-new">itdb_splr_add_new</link>               (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                             <link linkend="gint">gint</link> pos);
<link linkend="void">void</link>        <link linkend="itdb-spl-copy-rules">itdb_spl_copy_rules</link>             (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *dest,
                                             <link linkend="Itdb-Playlist">Itdb_Playlist</link> *src);
<link linkend="gboolean">gboolean</link>    <link linkend="itdb-splr-eval">itdb_splr_eval</link>                  (<link linkend="SPLRule">SPLRule</link> *splr,
                                             <link linkend="Itdb-Track">Itdb_Track</link> *track);
<link linkend="void">void</link>        <link linkend="itdb-spl-update">itdb_spl_update</link>                 (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *spl);
<link linkend="void">void</link>        <link linkend="itdb-spl-update-all">itdb_spl_update_all</link>             (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);
<link linkend="void">void</link>        <link linkend="itdb-spl-update-live">itdb_spl_update_live</link>            (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="SPLPref" role="struct"/>SPLPref</title>
<indexterm><primary>SPLPref</primary></indexterm><programlisting>typedef struct {
    guint8  liveupdate;        /* "live Updating" check box */
    guint8  checkrules;        /* "Match X of the following
				  conditions" check box */
    guint8  checklimits;       /* "Limit To..." check box */
    guint32 limittype;         /* See types defined above */
    guint32 limitsort;         /* See types defined above */
    guint32 limitvalue;        /* The value typed next to "Limit
				  type" */
    guint8  matchcheckedonly;  /* "Match only checked songs" check
				  box */
} SPLPref;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SPLRule" role="struct"/>SPLRule</title>
<indexterm><primary>SPLRule</primary></indexterm><programlisting>typedef struct {
    guint32 field;
    guint32 action;
    gchar *string;             /* data in UTF8  */
    /* from and to are pretty stupid.. if it's a date type of field,
       then
         value = 0x2dae2dae2dae2dae,
         date = some number, like 2 or -2
         units = unit in seconds, like 604800 = a week
       but if this is actually some kind of integer comparison, like
       rating = 60 (3 stars)
         value = the value we care about
	 date = 0
	 units = 1 */
    guint64 fromvalue;
    gint64 fromdate;
    guint64 fromunits;
    guint64 tovalue;
    gint64 todate;
    guint64 tounits;
    guint32 unk052;
    guint32 unk056;
    guint32 unk060;
    guint32 unk064;
    guint32 unk068;
} SPLRule;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SPLRules" role="struct"/>SPLRules</title>
<indexterm><primary>SPLRules</primary></indexterm><programlisting>typedef struct {
    guint32 unk004;
    guint32 match_operator;  /* "All" (logical AND): SPLMATCH_AND,
				"Any" (logical OR): SPLMATCH_OR */
    GList *rules;
} SPLRules;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SPLAction" role="enum"/>enum SPLAction</title>
<indexterm><primary>SPLAction</primary></indexterm><programlisting>typedef enum {
    SPLACTION_IS_INT = 0x00000001,          /* "Is Set" in iTunes */
    SPLACTION_IS_GREATER_THAN = 0x00000010, /* "Is After" in iTunes */
    SPLACTION_IS_LESS_THAN = 0x00000040,    /* "Is Before" in iTunes */
    SPLACTION_IS_IN_THE_RANGE = 0x00000100,
    SPLACTION_IS_IN_THE_LAST = 0x00000200,

    SPLACTION_IS_STRING = 0x01000001,
    SPLACTION_CONTAINS = 0x01000002,
    SPLACTION_STARTS_WITH = 0x01000004,
    SPLACTION_ENDS_WITH = 0x01000008,

    SPLACTION_IS_NOT_INT = 0x02000001,     /* "Is Not Set" in iTunes */

    /* Note: Not available in iTunes 4.5 (untested on iPod) */
    SPLACTION_IS_NOT_GREATER_THAN = 0x02000010,
    /* Note: Not available in iTunes 4.5 (untested on iPod) */
    SPLACTION_IS_NOT_LESS_THAN = 0x02000040,
    /* Note: Not available in iTunes 4.5 (seems to work on iPod) */
    SPLACTION_IS_NOT_IN_THE_RANGE = 0x02000100,

    SPLACTION_IS_NOT_IN_THE_LAST = 0x02000200,
    SPLACTION_IS_NOT = 0x03000001,
    SPLACTION_DOES_NOT_CONTAIN = 0x03000002,

    /* Note: Not available in iTunes 4.5 (seems to work on iPod) */
    SPLACTION_DOES_NOT_START_WITH = 0x03000004,
    /* Note: Not available in iTunes 4.5 (seems to work on iPod) */
    SPLACTION_DOES_NOT_END_WITH = 0x03000008,
} SPLAction;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SPLFieldType" role="enum"/>enum SPLFieldType</title>
<indexterm><primary>SPLFieldType</primary></indexterm><programlisting>typedef enum
{
    splft_string = 1,
    splft_int,
    splft_boolean,
    splft_date,
    splft_playlist,
    splft_unknown
} SPLFieldType;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SPLActionType" role="enum"/>enum SPLActionType</title>
<indexterm><primary>SPLActionType</primary></indexterm><programlisting>typedef enum
{
    splat_string = 1,
    splat_int,
    splat_date,
    splat_range_int,
    splat_range_date,
    splat_inthelast,
    splat_playlist,
    splat_none,
    splat_invalid,
    splat_unknown
} SPLActionType;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SPLField" role="enum"/>enum SPLField</title>
<indexterm><primary>SPLField</primary></indexterm><programlisting>typedef enum {
    SPLFIELD_SONG_NAME = 0x02,    /* String */
    SPLFIELD_ALBUM = 0x03,        /* String */
    SPLFIELD_ARTIST = 0x04,       /* String */
    SPLFIELD_BITRATE = 0x05,      /* Int (e.g. from/to = 128) */
    SPLFIELD_SAMPLE_RATE = 0x06,  /* Int  (e.g. from/to = 44100) */
    SPLFIELD_YEAR = 0x07,         /* Int  (e.g. from/to = 2004) */
    SPLFIELD_GENRE = 0x08,        /* String */
    SPLFIELD_KIND = 0x09,         /* String */
    SPLFIELD_DATE_MODIFIED = 0x0a,/* Int/Mac Timestamp (e.g. from/to =
                                     bcf93280 == is before 6/19/2004)*/
    SPLFIELD_TRACKNUMBER = 0x0b,  /* Int (e.g. from = 1, to = 2) */
    SPLFIELD_SIZE = 0x0c,         /* Int (e.g. from/to = 0x00600000
				     for 6MB) */
    SPLFIELD_TIME = 0x0d,         /* Int (e.g. from/to = 83999 for
				     1:23/83 seconds) */
    SPLFIELD_COMMENT = 0x0e,      /* String */
    SPLFIELD_DATE_ADDED = 0x10,   /* Int/Mac Timestamp (e.g. from/to =
                                     bcfa83ff == is after 6/19/2004) */
    SPLFIELD_COMPOSER = 0x12,     /* String */
    SPLFIELD_PLAYCOUNT = 0x16,    /* Int  (e.g. from/to = 1) */
    SPLFIELD_LAST_PLAYED = 0x17,  /* Int/Mac Timestamp (e.g. from =
                                     bcfa83ff (6/19/2004) to =
                                     0xbcfbd57f (6/20/2004)) */
    SPLFIELD_DISC_NUMBER = 0x18,  /* Int  (e.g. from/to = 1) */
    SPLFIELD_RATING = 0x19,       /* Int/Stars Rating (e.g. from/to =
                                     60 (3 stars)) */
    SPLFIELD_COMPILATION = 0x1f,  /* Int (e.g. is set -&gt;
				     SPLACTION_IS_INT/from=1,
				     is not set -&gt;
				     SPLACTION_IS_NOT_INT/from=1) */
    SPLFIELD_BPM = 0x23,          /* Int  (e.g. from/to = 60) */
    SPLFIELD_GROUPING = 0x27,     /* String */
    SPLFIELD_PLAYLIST = 0x28,     /* XXX - Unknown...not parsed
				     correctly...from/to = 0xb6fbad5f
				     for * "Purchased Music".  Extra
				     data after * "to"... */
} SPLField;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SPLDATE-IDENTIFIER:CAPS" role="macro"/>SPLDATE_IDENTIFIER</title>
<indexterm><primary>SPLDATE_IDENTIFIER</primary></indexterm><programlisting>#define SPLDATE_IDENTIFIER (G_GINT64_CONSTANT (0x2dae2dae2dae2daeU))
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SPL-MAXSTRINGLENGTH:CAPS" role="macro"/>SPL_MAXSTRINGLENGTH</title>
<indexterm><primary>SPL_MAXSTRINGLENGTH</primary></indexterm><programlisting>#define SPL_MAXSTRINGLENGTH 255
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SPL-STRING-MAXLEN:CAPS" role="macro"/>SPL_STRING_MAXLEN</title>
<indexterm><primary>SPL_STRING_MAXLEN</primary></indexterm><programlisting>#define SPL_STRING_MAXLEN 255
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="itdb-splr-get-field-type" role="function"/>itdb_splr_get_field_type ()</title>
<indexterm><primary>itdb_splr_get_field_type</primary></indexterm><programlisting><link linkend="SPLFieldType">SPLFieldType</link> itdb_splr_get_field_type       (const <link linkend="SPLRule">SPLRule</link> *splr);</programlisting>
<para>
Gets the type of the field of the <parameter>splr</parameter> rule</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>splr</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="SPLRule"><type>SPLRule</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> an <link linkend="SPLFieldType"><type>SPLFieldType</type></link> corresponding to <parameter>splr</parameter> field type 
(string, int, date, ...)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-splr-get-action-type" role="function"/>itdb_splr_get_action_type ()</title>
<indexterm><primary>itdb_splr_get_action_type</primary></indexterm><programlisting><link linkend="SPLActionType">SPLActionType</link> itdb_splr_get_action_type     (const <link linkend="SPLRule">SPLRule</link> *splr);</programlisting>
<para>
Gets the type of the action associated with <parameter>splr</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>splr</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="SPLRule"><type>SPLRule</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> type (range, date, string...) of the action field 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-splr-validate" role="function"/>itdb_splr_validate ()</title>
<indexterm><primary>itdb_splr_validate</primary></indexterm><programlisting><link linkend="void">void</link>        itdb_splr_validate              (<link linkend="SPLRule">SPLRule</link> *splr);</programlisting>
<para>
Validates a rule</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>splr</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="SPLRule"><type>SPLRule</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-splr-remove" role="function"/>itdb_splr_remove ()</title>
<indexterm><primary>itdb_splr_remove</primary></indexterm><programlisting><link linkend="void">void</link>        itdb_splr_remove                (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                             <link linkend="SPLRule">SPLRule</link> *splr);</programlisting>
<para>
Removes the smart playlist rule <parameter>splr</parameter> from playlist <parameter>pl</parameter>. The memory used by
<parameter>splr</parameter> is freed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>splr</parameter>&nbsp;:</term>
<listitem><simpara> an SPLRule
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-splr-new" role="function"/>itdb_splr_new ()</title>
<indexterm><primary>itdb_splr_new</primary></indexterm><programlisting><link linkend="SPLRule">SPLRule</link>*    itdb_splr_new                   (void);</programlisting>
<para>
Creates a new default smart rule</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="SPLRule"><type>SPLRule</type></link> that must be freed with <link linkend="itdb-splr-free"><function>itdb_splr_free()</function></link> when 
no longer needed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-splr-add" role="function"/>itdb_splr_add ()</title>
<indexterm><primary>itdb_splr_add</primary></indexterm><programlisting><link linkend="void">void</link>        itdb_splr_add                   (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                             <link linkend="SPLRule">SPLRule</link> *splr,
                                             <link linkend="gint">gint</link> pos);</programlisting>
<para>
Adds the smart rule <parameter>splr</parameter> to <parameter>pl</parameter> at position <parameter>pos</parameter>. If <parameter>pos</parameter> is -1, <parameter>splr</parameter> gets
appended to the end. After this call, <parameter>splr</parameter> memory is managed by <parameter>pl</parameter>, so 
you no longer need to call <link linkend="itdb-splr-free"><function>itdb_splr_free()</function></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>splr</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="SPLRule"><type>SPLRule</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&nbsp;:</term>
<listitem><simpara> position of the rule
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-splr-add-new" role="function"/>itdb_splr_add_new ()</title>
<indexterm><primary>itdb_splr_add_new</primary></indexterm><programlisting><link linkend="SPLRule">SPLRule</link>*    itdb_splr_add_new               (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                             <link linkend="gint">gint</link> pos);</programlisting>
<para>
Creates a new smart rule and inserts it at position <parameter>pos</parameter> in <parameter>pl</parameter>. If <parameter>pos</parameter> is
-1, the new rule gets appended to the end.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&nbsp;:</term>
<listitem><simpara> position to insert the rule at
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to the newly created <link linkend="SPLRule"><type>SPLRule</type></link>. Its memory is handled 
by <parameter>pl</parameter> though, so you don't need to explicitly call <link linkend="itdb-splr-free"><function>itdb_splr_free()</function></link> on it
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-spl-copy-rules" role="function"/>itdb_spl_copy_rules ()</title>
<indexterm><primary>itdb_spl_copy_rules</primary></indexterm><programlisting><link linkend="void">void</link>        itdb_spl_copy_rules             (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *dest,
                                             <link linkend="Itdb-Playlist">Itdb_Playlist</link> *src);</programlisting>
<para>
Copy all relevant information for smart playlist from playlist <parameter>src</parameter>
to playlist <parameter>dest</parameter>. If <parameter>dest</parameter> is already a smart playlist, the existing data
is overwritten/deleted.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dest</parameter>&nbsp;:</term>
<listitem><simpara> destination <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara> source <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-splr-eval" role="function"/>itdb_splr_eval ()</title>
<indexterm><primary>itdb_splr_eval</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    itdb_splr_eval                  (<link linkend="SPLRule">SPLRule</link> *splr,
                                             <link linkend="Itdb-Track">Itdb_Track</link> *track);</programlisting>
<para>
Evaluates <parameter>splr</parameter>'s truth against <parameter>track</parameter>. track-&gt;itdb must be set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>splr</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="SPLRule"><type>SPLRule</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>track</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Track"><type>Itdb_Track</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE if <parameter>track</parameter> matches <parameter>splr</parameter>, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-spl-update" role="function"/>itdb_spl_update ()</title>
<indexterm><primary>itdb_spl_update</primary></indexterm><programlisting><link linkend="void">void</link>        itdb_spl_update                 (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *spl);</programlisting>
<para>
Updates the content of the smart playlist <parameter>spl</parameter> (meant to be called if the 
tracks stored in the <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link> associated with <parameter>spl</parameter> have changed 
somehow and you want spl-&gt;members to be accurate with regards to those 
changes. Does nothing if <parameter>spl</parameter> isn't a smart playlist.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>spl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-spl-update-all" role="function"/>itdb_spl_update_all ()</title>
<indexterm><primary>itdb_spl_update_all</primary></indexterm><programlisting><link linkend="void">void</link>        itdb_spl_update_all             (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);</programlisting>
<para>
Updates all smart playlists contained in <parameter>itdb</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>itdb</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-spl-update-live" role="function"/>itdb_spl_update_live ()</title>
<indexterm><primary>itdb_spl_update_live</primary></indexterm><programlisting><link linkend="void">void</link>        itdb_spl_update_live            (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);</programlisting>
<para>
Updates all 'live' smart playlists contained in <parameter>itdb</parameter>, ie those which have 
the 'live updating' flag set</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>itdb</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
