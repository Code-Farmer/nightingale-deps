<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libgpod-The-Itdb-iTunesDB-structure">
<refmeta>
<refentrytitle role="top_of_page">iPod database reading/writing</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGPOD Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>iPod database reading/writing</refname>
<refpurpose>Functions to create, read, write the iPod database</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



            <link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link>;
<link linkend="void">void</link>        (<link linkend="ItdbUserDataDestroyFunc">*ItdbUserDataDestroyFunc</link>)      (<link linkend="gpointer">gpointer</link> userdata);
<link linkend="gpointer">gpointer</link>    (<link linkend="ItdbUserDataDuplicateFunc">*ItdbUserDataDuplicateFunc</link>)    (<link linkend="gpointer">gpointer</link> userdata);
<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link>* <link linkend="itdb-new">itdb_new</link>                     (void);
<link linkend="void">void</link>        <link linkend="itdb-free">itdb_free</link>                       (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);
<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link>* <link linkend="itdb-parse">itdb_parse</link>                   (const <link linkend="gchar">gchar</link> *mp,
                                             <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>    <link linkend="itdb-write">itdb_write</link>                      (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *db,
                                             <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>        <link linkend="itdb-set-mountpoint">itdb_set_mountpoint</link>             (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb,
                                             const <link linkend="gchar">gchar</link> *mp);
const <link linkend="gchar">gchar</link>* <link linkend="itdb-get-mountpoint">itdb_get_mountpoint</link>            (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);
<link linkend="guint32">guint32</link>     <link linkend="itdb-tracks-number">itdb_tracks_number</link>              (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);
<link linkend="guint32">guint32</link>     <link linkend="itdb-tracks-number-nontransferred">itdb_tracks_number_nontransferred</link>
                                            (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);
<link linkend="guint32">guint32</link>     <link linkend="itdb-playlists-number">itdb_playlists_number</link>           (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="Itdb-iTunesDB" role="struct"/>Itdb_iTunesDB</title>
<indexterm><primary>Itdb_iTunesDB</primary></indexterm><programlisting>typedef struct {
    GList *tracks;
    GList *playlists;
    gchar *filename;    /* filename of iTunesDB */
    Itdb_Device *device;/* iPod device info     */
    guint32 version;
    guint64 id;
    /* below is for use by application */
    guint64 usertype;
    gpointer userdata;
    /* function called to duplicate userdata */
    ItdbUserDataDuplicateFunc userdata_duplicate;
    /* function called to free userdata */
    ItdbUserDataDestroyFunc userdata_destroy;
} Itdb_iTunesDB;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="ItdbUserDataDestroyFunc" role="function"/>ItdbUserDataDestroyFunc ()</title>
<indexterm><primary>ItdbUserDataDestroyFunc</primary></indexterm><programlisting><link linkend="void">void</link>        (*ItdbUserDataDestroyFunc)      (<link linkend="gpointer">gpointer</link> userdata);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>userdata</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="ItdbUserDataDuplicateFunc" role="function"/>ItdbUserDataDuplicateFunc ()</title>
<indexterm><primary>ItdbUserDataDuplicateFunc</primary></indexterm><programlisting><link linkend="gpointer">gpointer</link>    (*ItdbUserDataDuplicateFunc)    (<link linkend="gpointer">gpointer</link> userdata);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>userdata</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-new" role="function"/>itdb_new ()</title>
<indexterm><primary>itdb_new</primary></indexterm><programlisting><link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link>* itdb_new                     (void);</programlisting>
<para>
Creates a new Itdb_iTunesDB with the unknowns filled in to reasonable
values.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a newly created Itdb_iTunesDB to be freed with <link linkend="itdb-free"><function>itdb_free()</function></link>
when it's no longer needed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-free" role="function"/>itdb_free ()</title>
<indexterm><primary>itdb_free</primary></indexterm><programlisting><link linkend="void">void</link>        itdb_free                       (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);</programlisting>
<para>
Free the memory taken by <parameter>itdb</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>itdb</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-parse" role="function"/>itdb_parse ()</title>
<indexterm><primary>itdb_parse</primary></indexterm><programlisting><link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link>* itdb_parse                   (const <link linkend="gchar">gchar</link> *mp,
                                             <link linkend="GError">GError</link> **error);</programlisting>
<para>
Parse the Itdb_iTunesDB of the iPod located at <parameter>mp</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mp</parameter>&nbsp;:</term>
<listitem><simpara> mount point of the iPod (eg "/mnt/ipod) in local encoding
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> return location for a <link linkend="GError"><type>GError</type></link> or NULL
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a newly allocated <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link> struct holding the tracks and
the playlists present on the iPod at <parameter>mp</parameter>, NULL if <parameter>mp</parameter> isn't an iPod mount
point. If non-NULL, the <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link> is to be freed with <link linkend="itdb-free"><function>itdb_free()</function></link> when
it's no longer needed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-write" role="function"/>itdb_write ()</title>
<indexterm><primary>itdb_write</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    itdb_write                      (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *db,
                                             <link linkend="GError">GError</link> **error);</programlisting>
<para>
Write out an iTunesDB. It reassigns unique IDs to all tracks. 
An existing "Play Counts" file is renamed to "Play Counts.bak" if
the export was successful.
An existing "OTGPlaylistInfo" file is removed if the export was
successful.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>db</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> return location for a <link linkend="GError"><type>GError</type></link> or NULL
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE on error, in which case <parameter>error</parameter> is
set accordingly.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-set-mountpoint" role="function"/>itdb_set_mountpoint ()</title>
<indexterm><primary>itdb_set_mountpoint</primary></indexterm><programlisting><link linkend="void">void</link>        itdb_set_mountpoint             (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb,
                                             const <link linkend="gchar">gchar</link> *mp);</programlisting>
<para>
Sets the mountpoint of <parameter>db</parameter>. Always use this function to set the mountpoint
of an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link> as it will reset the number of available 
/iPod_Control/Music/F.. dirs. It doesn't attempt to parse an iPod database
that may be present on the iPod at <parameter>mp</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>itdb</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mp</parameter>&nbsp;:</term>
<listitem><simpara> new mount point
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-get-mountpoint" role="function"/>itdb_get_mountpoint ()</title>
<indexterm><primary>itdb_get_mountpoint</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>* itdb_get_mountpoint            (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);</programlisting>
<para>
Retrieve a reference to the mountpoint of <parameter>itdb</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>itdb</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the <parameter>itdb</parameter> mountpoint, this string shouldn't be freed nor 
modified
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-tracks-number" role="function"/>itdb_tracks_number ()</title>
<indexterm><primary>itdb_tracks_number</primary></indexterm><programlisting><link linkend="guint32">guint32</link>     itdb_tracks_number              (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);</programlisting>
<para>
Counts the number of tracks stored in <parameter>itdb</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>itdb</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the number of tracks in <parameter>itdb</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-tracks-number-nontransferred" role="function"/>itdb_tracks_number_nontransferred ()</title>
<indexterm><primary>itdb_tracks_number_nontransferred</primary></indexterm><programlisting><link linkend="guint32">guint32</link>     itdb_tracks_number_nontransferred
                                            (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);</programlisting>
<para>
Counts the number of non-transferred tracks in <parameter>itdb</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>itdb</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the number of tracks in <parameter>itdb</parameter> that haven't been transferred
to the iPod yet (ie the number of <link linkend="Itdb-Track"><type>Itdb_Track</type></link> in which the transferred field
is false)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlists-number" role="function"/>itdb_playlists_number ()</title>
<indexterm><primary>itdb_playlists_number</primary></indexterm><programlisting><link linkend="guint32">guint32</link>     itdb_playlists_number           (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);</programlisting>
<para>
Counts the number of playlists stored in <parameter>itdb</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>itdb</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the number of playlists in <parameter>itdb</parameter> (including the master 
playlist)
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
