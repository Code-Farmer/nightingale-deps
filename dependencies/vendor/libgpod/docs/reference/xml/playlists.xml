<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libgpod-Playlists">
<refmeta>
<refentrytitle role="top_of_page">Playlists</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGPOD Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Playlists</refname>
<refpurpose>Data structure to represent an iPod playlist</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



            <link linkend="Itdb-Playlist">Itdb_Playlist</link>;
enum        <link linkend="ItdbPlaylistSortOrder">ItdbPlaylistSortOrder</link>;
<link linkend="Itdb-Playlist">Itdb_Playlist</link>* <link linkend="itdb-playlist-new">itdb_playlist_new</link>            (const <link linkend="gchar">gchar</link> *title,
                                             <link linkend="gboolean">gboolean</link> spl);
<link linkend="void">void</link>        <link linkend="itdb-playlist-free">itdb_playlist_free</link>              (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);
<link linkend="Itdb-Playlist">Itdb_Playlist</link>* <link linkend="itdb-playlist-duplicate">itdb_playlist_duplicate</link>      (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);
<link linkend="void">void</link>        <link linkend="itdb-playlist-add">itdb_playlist_add</link>               (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb,
                                             <link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                             <link linkend="gint32">gint32</link> pos);
<link linkend="void">void</link>        <link linkend="itdb-playlist-move">itdb_playlist_move</link>              (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                             <link linkend="guint32">guint32</link> pos);
<link linkend="void">void</link>        <link linkend="itdb-playlist-remove">itdb_playlist_remove</link>            (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);
<link linkend="void">void</link>        <link linkend="itdb-playlist-unlink">itdb_playlist_unlink</link>            (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);
<link linkend="void">void</link>        <link linkend="itdb-playlist-add-track">itdb_playlist_add_track</link>         (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                             <link linkend="Itdb-Track">Itdb_Track</link> *track,
                                             <link linkend="gint32">gint32</link> pos);
<link linkend="void">void</link>        <link linkend="itdb-playlist-remove-track">itdb_playlist_remove_track</link>      (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                             <link linkend="Itdb-Track">Itdb_Track</link> *track);
<link linkend="gboolean">gboolean</link>    <link linkend="itdb-playlist-contains-track">itdb_playlist_contains_track</link>    (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                             <link linkend="Itdb-Track">Itdb_Track</link> *track);
<link linkend="guint32">guint32</link>     <link linkend="itdb-playlist-contain-track-number">itdb_playlist_contain_track_number</link>
                                            (<link linkend="Itdb-Track">Itdb_Track</link> *tr);
<link linkend="guint32">guint32</link>     <link linkend="itdb-playlist-tracks-number">itdb_playlist_tracks_number</link>     (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);
<link linkend="Itdb-Playlist">Itdb_Playlist</link>* <link linkend="itdb-playlist-mpl">itdb_playlist_mpl</link>            (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);
<link linkend="gboolean">gboolean</link>    <link linkend="itdb-playlist-is-mpl">itdb_playlist_is_mpl</link>            (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);
<link linkend="void">void</link>        <link linkend="itdb-playlist-set-mpl">itdb_playlist_set_mpl</link>           (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);
<link linkend="Itdb-Playlist">Itdb_Playlist</link>* <link linkend="itdb-playlist-podcasts">itdb_playlist_podcasts</link>       (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);
<link linkend="gboolean">gboolean</link>    <link linkend="itdb-playlist-is-podcasts">itdb_playlist_is_podcasts</link>       (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);
<link linkend="void">void</link>        <link linkend="itdb-playlist-set-podcasts">itdb_playlist_set_podcasts</link>      (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);
<link linkend="gboolean">gboolean</link>    <link linkend="itdb-playlist-exists">itdb_playlist_exists</link>            (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb,
                                             <link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);
<link linkend="Itdb-Playlist">Itdb_Playlist</link>* <link linkend="itdb-playlist-by-id">itdb_playlist_by_id</link>          (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb,
                                             <link linkend="guint64">guint64</link> id);
<link linkend="Itdb-Playlist">Itdb_Playlist</link>* <link linkend="itdb-playlist-by-nr">itdb_playlist_by_nr</link>          (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb,
                                             <link linkend="guint32">guint32</link> num);
<link linkend="Itdb-Playlist">Itdb_Playlist</link>* <link linkend="itdb-playlist-by-name">itdb_playlist_by_name</link>        (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb,
                                             <link linkend="gchar">gchar</link> *name);
<link linkend="void">void</link>        <link linkend="itdb-playlist-randomize">itdb_playlist_randomize</link>         (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="Itdb-Playlist" role="struct"/>Itdb_Playlist</title>
<indexterm><primary>Itdb_Playlist</primary></indexterm><programlisting>typedef struct {
    Itdb_iTunesDB *itdb;  /* pointer to iTunesDB (for convenience) */
    gchar *name;          /* name of playlist in UTF8              */
    guint8 type;          /* ITDB_PL_TYPE_NORM/_MPL                */
    guint8 flag1;         /* unknown, usually set to 0             */
    guint8 flag2;         /* unknown, always set to 0              */
    guint8 flag3;         /* unknown, always set to 0              */
    gint  num;            /* number of tracks in playlist          */
    GList *members;       /* tracks in playlist (Track *)          */
    gboolean is_spl;      /* smart playlist?                       */
    guint32 timestamp;    /* some timestamp                        */
    guint64 id;           /* playlist ID                           */
    guint32 mhodcount;    /* This appears to be the number of string
			     MHODs (type &lt; 50) associated with this
			     playlist (typically 0x01). Doesn't seem
			     to be signficant unless you include Type
			     52 MHODs. libgpod sets this to 1 when
			     syncing */
    guint16 libmhodcount; /* The number of Type 52 MHODs associated
			     with this playlist. If you don't create
			     Type 52 MHODs, this can be
			     zero. Otherwise, if you have Type 52
			     MHODs associated with this playlist and
			     set this to zero, no songs appear on the
			     iPod. jcsjcs: with iTunes 4.9 this seems
			     to be set to 1 even without any Type 52
			     MHODs present. libgpod sets this to 1
			     when syncing */
    guint32 sortorder;    /* How to sort playlist -- see below     */
    guint32 podcastflag;  /* ITDB_PL_FLAG_NORM/_PODCAST            */
    SPLPref splpref;      /* smart playlist prefs                  */
    SPLRules splrules;    /* rules for smart playlists             */
    /* below is for use by application */
    guint64 usertype;
    gpointer userdata;
    /* function called to duplicate userdata */
    ItdbUserDataDuplicateFunc userdata_duplicate;
    /* function called to free userdata */
    ItdbUserDataDestroyFunc userdata_destroy;
} Itdb_Playlist;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="ItdbPlaylistSortOrder" role="enum"/>enum ItdbPlaylistSortOrder</title>
<indexterm><primary>ItdbPlaylistSortOrder</primary></indexterm><programlisting>typedef enum
{
    ITDB_PSO_MANUAL = 1,
/*    ITDB_PSO_UNKNOWN = 2, */
    ITDB_PSO_TITLE = 3,
    ITDB_PSO_ALBUM = 4,
    ITDB_PSO_ARTIST = 5,
    ITDB_PSO_BIRATE = 6,
    ITDB_PSO_GENRE = 7,
    ITDB_PSO_FILETYPE = 8,
    ITDB_PSO_TIME_MODIFIED = 9,
    ITDB_PSO_TRACK_NR = 10,
    ITDB_PSO_SIZE = 11,
    ITDB_PSO_TIME = 12,  /* ? */
    ITDB_PSO_YEAR = 13,
    ITDB_PSO_SAMPLERATE = 14,
    ITDB_PSO_COMMENT = 15,
    ITDB_PSO_TIME_ADDED = 16,
    ITDB_PSO_EQUALIZER = 17, /* ? */
    ITDB_PSO_COMPOSER = 18,
/*    ITDB_PSO_UNKNOWN = 19, */
    ITDB_PSO_PLAYCOUNT = 20,
    ITDB_PSO_TIME_PLAYED = 21,
    ITDB_PSO_CD_NR = 22,
    ITDB_PSO_RATING = 23,
    ITDB_PSO_RELEASE_DATE = 24, /* used by podcasts */
    ITDB_PSO_BPM = 25,
    ITDB_PSO_GROUPING = 26,
    ITDB_PSO_CATEGORY = 27,
    ITDB_PSO_DESCRIPTION = 28
} ItdbPlaylistSortOrder;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-new" role="function"/>itdb_playlist_new ()</title>
<indexterm><primary>itdb_playlist_new</primary></indexterm><programlisting><link linkend="Itdb-Playlist">Itdb_Playlist</link>* itdb_playlist_new            (const <link linkend="gchar">gchar</link> *title,
                                             <link linkend="gboolean">gboolean</link> spl);</programlisting>
<para>
Creates a new playlist. If <parameter>spl</parameter> is TRUE, a smart
playlist is generated. pl->id is set by <link linkend="itdb-playlist-add"><function>itdb_playlist_add()</function></link> when the 
playlist is added to an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>title</parameter>&nbsp;:</term>
<listitem><simpara> playlist title
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>spl</parameter>&nbsp;:</term>
<listitem><simpara> smart playlist flag
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link> which must be freed with 
<link linkend="itdb-playlist-free"><function>itdb_playlist_free()</function></link> after use
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-free" role="function"/>itdb_playlist_free ()</title>
<indexterm><primary>itdb_playlist_free</primary></indexterm><programlisting><link linkend="void">void</link>        itdb_playlist_free              (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);</programlisting>
<para>
Frees the memory used by playlist <parameter>pl</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-duplicate" role="function"/>itdb_playlist_duplicate ()</title>
<indexterm><primary>itdb_playlist_duplicate</primary></indexterm><programlisting><link linkend="Itdb-Playlist">Itdb_Playlist</link>* itdb_playlist_duplicate      (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);</programlisting>
<para>
Duplicates an existing playlist. pl_dup-&gt;id is set to zero, so that
it will be set to a unique value when adding it to an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link>. The
returned playlist won't be associated with an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a newly allocated <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link> that you'll have to free
with <link linkend="itdb-playlist-free"><function>itdb_playlist_free()</function></link> when you no longer need it. 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-add" role="function"/>itdb_playlist_add ()</title>
<indexterm><primary>itdb_playlist_add</primary></indexterm><programlisting><link linkend="void">void</link>        itdb_playlist_add               (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb,
                                             <link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                             <link linkend="gint32">gint32</link> pos);</programlisting>
<para>
Adds playlist <parameter>pl</parameter> to the database <parameter>itdb</parameter> at position <parameter>pos</parameter> (-1 for
"append to end"). A unique id is created if pl-&gt;id is equal to
zero. After calling this function, <parameter>itdb</parameter> manages the memory of <parameter>pl</parameter>, which
means you no longer need to explicitly call <link linkend="itdb-playlist-free"><function>itdb_playlist_free()</function></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>itdb</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&nbsp;:</term>
<listitem><simpara> position to insert <parameter>pl</parameter> at
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-move" role="function"/>itdb_playlist_move ()</title>
<indexterm><primary>itdb_playlist_move</primary></indexterm><programlisting><link linkend="void">void</link>        itdb_playlist_move              (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                             <link linkend="guint32">guint32</link> pos);</programlisting>
<para>
Moves playlist <parameter>pl</parameter> to position <parameter>pos</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&nbsp;:</term>
<listitem><simpara> new position
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-remove" role="function"/>itdb_playlist_remove ()</title>
<indexterm><primary>itdb_playlist_remove</primary></indexterm><programlisting><link linkend="void">void</link>        itdb_playlist_remove            (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);</programlisting>
<para>
Removes <parameter>pl</parameter> from the <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link> it's associated with 
and frees memory</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-unlink" role="function"/>itdb_playlist_unlink ()</title>
<indexterm><primary>itdb_playlist_unlink</primary></indexterm><programlisting><link linkend="void">void</link>        itdb_playlist_unlink            (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);</programlisting>
<para>
Remove <parameter>pl</parameter> from the <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link> it's associated with but do not free 
memory. pl-&gt;itdb is set to NULL after this function returns</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-add-track" role="function"/>itdb_playlist_add_track ()</title>
<indexterm><primary>itdb_playlist_add_track</primary></indexterm><programlisting><link linkend="void">void</link>        itdb_playlist_add_track         (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                             <link linkend="Itdb-Track">Itdb_Track</link> *track,
                                             <link linkend="gint32">gint32</link> pos);</programlisting>
<para>
Adds <parameter>track</parameter> to <parameter>pl</parameter> at position <parameter>pos</parameter> (-1 for "append to
end")</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>track</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Track"><type>Itdb_Track</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&nbsp;:</term>
<listitem><simpara> position to insert <parameter>track</parameter> at
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-remove-track" role="function"/>itdb_playlist_remove_track ()</title>
<indexterm><primary>itdb_playlist_remove_track</primary></indexterm><programlisting><link linkend="void">void</link>        itdb_playlist_remove_track      (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                             <link linkend="Itdb-Track">Itdb_Track</link> *track);</programlisting>
<para>
Removes <parameter>track</parameter> from <parameter>pl</parameter>. If <parameter>pl</parameter> is NULL, removes <parameter>track</parameter> from the
master playlist. If <parameter>track</parameter> can't be found in <parameter>pl</parameter>, nothing happens. If after
removing <parameter>track</parameter>, <parameter>pl</parameter> is empty, it's not removed from the database
The memory used by <parameter>track</parameter> isn't freed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>track</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Track"><type>Itdb_Track</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-contains-track" role="function"/>itdb_playlist_contains_track ()</title>
<indexterm><primary>itdb_playlist_contains_track</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    itdb_playlist_contains_track    (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                             <link linkend="Itdb-Track">Itdb_Track</link> *track);</programlisting>
<para>
Checks if <parameter>track</parameter> is in <parameter>pl</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>track</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Track"><type>Itdb_Track</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE if <parameter>track</parameter> is in <parameter>pl</parameter>, FALSE otherwise
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-contain-track-number" role="function"/>itdb_playlist_contain_track_number ()</title>
<indexterm><primary>itdb_playlist_contain_track_number</primary></indexterm><programlisting><link linkend="guint32">guint32</link>     itdb_playlist_contain_track_number
                                            (<link linkend="Itdb-Track">Itdb_Track</link> *tr);</programlisting>
<para>
Counts the number of playlist <parameter>track</parameter> is a member of (not including the 
master playlist)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>tr</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Track"><type>Itdb_Track</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> number of playlist containing <parameter>track</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-tracks-number" role="function"/>itdb_playlist_tracks_number ()</title>
<indexterm><primary>itdb_playlist_tracks_number</primary></indexterm><programlisting><link linkend="guint32">guint32</link>     itdb_playlist_tracks_number     (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);</programlisting>
<para>
Counts the number of tracks in <parameter>pl</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> track count
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-mpl" role="function"/>itdb_playlist_mpl ()</title>
<indexterm><primary>itdb_playlist_mpl</primary></indexterm><programlisting><link linkend="Itdb-Playlist">Itdb_Playlist</link>* itdb_playlist_mpl            (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);</programlisting>
<para>
Gets the master playlist of <parameter>itdb</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>itdb</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the master playlist of <parameter>itdb</parameter> 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-is-mpl" role="function"/>itdb_playlist_is_mpl ()</title>
<indexterm><primary>itdb_playlist_is_mpl</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    itdb_playlist_is_mpl            (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);</programlisting>
<para>
Checks if <parameter>pl</parameter> is the master playlist</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE if <parameter>pl</parameter> is the master playlist, FALSE otherwise 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-set-mpl" role="function"/>itdb_playlist_set_mpl ()</title>
<indexterm><primary>itdb_playlist_set_mpl</primary></indexterm><programlisting><link linkend="void">void</link>        itdb_playlist_set_mpl           (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);</programlisting>
<para>
Sets <parameter>pl</parameter> to be a master playlist</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-podcasts" role="function"/>itdb_playlist_podcasts ()</title>
<indexterm><primary>itdb_playlist_podcasts</primary></indexterm><programlisting><link linkend="Itdb-Playlist">Itdb_Playlist</link>* itdb_playlist_podcasts       (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);</programlisting>
<para>
Gets the podcasts playlist of <parameter>itdb</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>itdb</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the podcasts playlist of <parameter>itdb</parameter>, or NULL if it's there is none
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-is-podcasts" role="function"/>itdb_playlist_is_podcasts ()</title>
<indexterm><primary>itdb_playlist_is_podcasts</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    itdb_playlist_is_podcasts       (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);</programlisting>
<para>
Checks if <parameter>pl</parameter> is the podcasts playlist</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE if <parameter>pl</parameter> is the podcasts playlist, FALSE otherwise 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-set-podcasts" role="function"/>itdb_playlist_set_podcasts ()</title>
<indexterm><primary>itdb_playlist_set_podcasts</primary></indexterm><programlisting><link linkend="void">void</link>        itdb_playlist_set_podcasts      (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);</programlisting>
<para>
Set <parameter>pl</parameter> to be a podcasts playlist</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-exists" role="function"/>itdb_playlist_exists ()</title>
<indexterm><primary>itdb_playlist_exists</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    itdb_playlist_exists            (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb,
                                             <link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);</programlisting>
<para>
Checks if <parameter>pl</parameter> is present in <parameter>db</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>itdb</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE if <parameter>pl</parameter> exists in <parameter>db</parameter>, FALSE otherwise 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-by-id" role="function"/>itdb_playlist_by_id ()</title>
<indexterm><primary>itdb_playlist_by_id</primary></indexterm><programlisting><link linkend="Itdb-Playlist">Itdb_Playlist</link>* itdb_playlist_by_id          (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb,
                                             <link linkend="guint64">guint64</link> id);</programlisting>
<para>
Looks up a playlist whose ID is <parameter>id</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>itdb</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara> ID of the playlist to look for
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link> with ID <parameter>id</parameter> or NULL if there is no such
playlist.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-by-nr" role="function"/>itdb_playlist_by_nr ()</title>
<indexterm><primary>itdb_playlist_by_nr</primary></indexterm><programlisting><link linkend="Itdb-Playlist">Itdb_Playlist</link>* itdb_playlist_by_nr          (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb,
                                             <link linkend="guint32">guint32</link> num);</programlisting>
<para>
Gets the playlist at the given position in <parameter>itdb</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>itdb</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>num</parameter>&nbsp;:</term>
<listitem><simpara> the position of the playlist, counting from 0
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>, or NULL if there is no playlist at <parameter>pos</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-by-name" role="function"/>itdb_playlist_by_name ()</title>
<indexterm><primary>itdb_playlist_by_name</primary></indexterm><programlisting><link linkend="Itdb-Playlist">Itdb_Playlist</link>* itdb_playlist_by_name        (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb,
                                             <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Searches a playlist whose name is <parameter>name</parameter> in <parameter>itdb</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>itdb</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> name of the playlist to look for
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the first <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link> with name <parameter>name</parameter>, NULL if there is no
such playlist
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-playlist-randomize" role="function"/>itdb_playlist_randomize ()</title>
<indexterm><primary>itdb_playlist_randomize</primary></indexterm><programlisting><link linkend="void">void</link>        itdb_playlist_randomize         (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl);</programlisting>
<para>
Randomizes <parameter>pl</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link> to randomize
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
